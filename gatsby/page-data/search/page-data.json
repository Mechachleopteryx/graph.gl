{"componentChunkName":"component---node-modules-ocular-gatsby-src-templates-search-jsx","path":"/search","webpackCompilationHash":"55e27816cec51256e77d","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":[{"excerpt":"Introduction Graph.gl is a React component for visualizing large graphs with several utility functions. It can build a highly customizable…","rawMarkdownBody":"# Introduction\n\nGraph.gl is a React component for visualizing large graphs with several utility functions. It can build a highly customizable graph visualization through its composable API. The rendering is powered by deck.gl which is a WebGL based visualization framework.  With Graph.gl, users are enabled to build various type of graph/network applications with minimum efforts while having the capability to extend the existing styles and layouts.\n\n## Motivation\nUber started to build its own knowledge graph since two years ago, and uGraph, the knowledge graph exploration tool was created since then. With the capability of querying large graph data and different ways to explore graph, it’s getting more urgent to produce more produce more different graph visualization applications.\nTo quickly build a graph visualization, we start to extract the code from uGraph and build a reusable React component for graph visualization, Graph.gl, which equipped advanced Deck.gl rendering capability and several useful graph algorithms and operations. Although there are a great number of commercial graph visualization tools, only a few of them allow users to extend the layout and customization. With Graph.gl, developers are allowed to create graph visualization with minimum efforts while having the capability to override anything they want in the library.\n\n## Goal\nWe plan to open source this library that can help the community to create their own solutions for the graph. Open source helps promoting the brand of visualization team at Uber, which could help with recruiting. Once Graph.gl is mature and stable enough, we will start to integrate it with several Uber internal tools, such as Jupyter notebook and Querybuilder as a graph visualization tool.\n\n## Roadmap\n\nPhase 1 - 2019 Q3\n - Customization: easily change the appearance of nodes and links.\n - Flexibility: able to extend and create new graph layout algorithms.\n - Compatible with deck.gl: allows complex visualizations to be constructed by composing deck.gl layers, and makes it easy to package and share new graph visualizations as reusable layers.\n - Interaction: support clicking detection, viewport manipulation.\n - Speed / Performance: able to draw medium(5000+ nodes) to large (10,000+ nodes) sized graphs quickly with interactive speed.\n - Testability: able to test each module easily.\n - Well documentation and a gallery of examples.\n - Modular architecture: clean interface between the renderer, layout-engine, and the graph attribute calculation. Users can choose to use our solution as a whole, or to switch out either module if they need to use their own.\n\nPhase 2 - 2019 Q4 - 2020 Q1\n - Support dynamic graph - streaming data.\n - Leverage GPU computation power to get high performance rendering and layout calculation.\n - Pre/Post graph calculation modules, ex: shortest path, pagerank, community detection, HITS\n - 2D / 3D rendering\n - Client/Server side rendering\n - Support arrow data and some other popular graph data format.\n - Multiple Modules: each layout/computation module should be published as separated modules so we can reduce the code size.\n - Pure JavaScript Support\n","slug":"docs","title":"Introduction"},{"excerpt":"Versioning Policy Please visit the release history. This log includes a list of bug fixes and new features, as well as breaking changes and…","rawMarkdownBody":"# Versioning Policy\n\nPlease visit the [release history](https://github.com/uber/graph.gl/releases). This log includes a list of bug fixes and new features, as well as breaking changes and migration guides.\n\nThe project follows [SemVer](https://semver.org/), with a few flavours. We do not bump major versions for the following changes:\n\n- Any component or function that's prefixed with Unstable_ / unstable_ may change or be removed without notice.\n- Visual changes, like colors and sizes, or any changes in CSS.\n- Change in undocumented APIs and internal data structures.\n- Development builds of Graph.gl include many helpful warnings.\n\nIn the event of a future breaking change, we will add warnings which indicate the feature is scheduled for deprecation and will provide migration instructions. Deprecation warnings may be added in a minor version. Following major versions will remove the deprecated feature.\n","slug":"docs/version-policy","title":"Versioning Policy"},{"excerpt":"LABEL  (String | Function, required) The text of the label. If a string is provided for , all the edges will have the same text. If an…","rawMarkdownBody":"# LABEL\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/edge-styles/label.png\" height=\"200\" />\n</p>\n\n### `text` (String | Function, required)\n- The text of the label.\n- If a string is provided for `text`, all the edges will have the same text.\n- If an accessor function is provided, the function will be called to retrieve the text of each edge.\n\n### `color` (String | Array | Function, optional)\n- Default: `[255, 255, 255, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all edges.\n- If a function is provided, it is called on each edge to retrieve its color.\n\n### `fontSize` (Number | Function, optional)\n- Default: `12`\n- If a number is provided for `fontSize`, all the labels will have the same font size.\n- If an accessor function is provided, the function will be called to retrieve the font size of each label.\n\n### `textAnchor` (String | Function, optional)\n- Default: `middle`\n- The text anchor. Available options include 'start', 'middle' and 'end'.\n\n- If a string is provided, it is used as the text anchor for all edges.\n- If a function is provided, it is called on each edge to retrieve its text anchor.\n\n### `alignmentBaseline` (String | Function, optional)\n- Default: `center`\nThe alignment baseline. Available options include 'top', 'center' and 'bottom'.\n- If a string is provided, it is used as the alignment baseline for all edges.\n- If a function is provided, it is called on each edge to retrieve its alignment baseline.\n","slug":"docs/api-reference/edge-style-label","title":"LABEL"},{"excerpt":"Edge Style Usage  (String | Array | Function, optional) Default:  The value can be hex code, color name, or color array  (each component is…","rawMarkdownBody":"# Edge Style\n\n### Usage\n\n```js\nedgeStyle={{\n  stroke: 'black',\n  strokeWidth: 2,\n  decorators: [\n    {\n      type: EDGE_DECORATOR_TYPE.LABEL,\n      text: edge => edge.id,\n      color: '#000',\n      fontSize: 18,\n    },\n  ],\n}}\n```\n\n### `stroke` (String | Array | Function, optional)\n- Default: `[255, 255, 255, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all edges.\n- If a function is provided, it is called on each rectangle to retrieve its color.\n\n### `strokeWidth` (Number | Function, optional)\n- Default: `0`\nThe width of the outline of each rectangle.\nIf a number is provided, it is used as the outline width for all edges.\nIf a function is provided, it is called on each rectangle to retrieve its outline width.\n\n### `decorators` (Array, optional)\nA set of decorators on edges. Please see more detail in the ['Edge decorators'](/docs/api-reference/edge-style-label) chapter.\n","slug":"docs/api-reference/edge-style","title":"Edge Style"},{"excerpt":"Edge Class The  class is the base class of the edge, which provides a list of basic util functions to be used through out the applications…","rawMarkdownBody":"# Edge Class\n\nThe `Edge` class is the base class of the edge, which provides a list of basic util functions to be used through out the applications.\n\n\n## Constructor\n```js\nnew Edge(props);\n```\n\nParameters:\n- `props` (Object) - `Edge` properties.\n\n### Basic Properties\n##### `id` (String|Number, required)\n\nThe `id` must be unique among all edges in the graph at a given time.\n\n\n##### `sourceId` (String|Number, required)\nThe id of the source node.\n\n##### `targetId` (String|Number, required)\nThe id of the target node.\n\n\n##### `directed` (Boolean, optional)\n\n- Default: `false`\nThe edge has direction or not.\n\n\n##### `data` (Object, optional)\n\n- Default: `{}`\n\nThe origin edge data.\n\n\n## getId()\nReturn the ID of the edge.\n\n\n## getPropertyValue(key)\nReturn of the value of the selected property key.\n\n##### `key` (String|Number, required)\n\nThe property key.\n\n## getSourceNodeId()\nGet the ID of the source node.\n\n\n## getTargetNodeId()\nGet the ID of the target node.\n\n\n## isDirected()\nReturn whether the edge is directed or not.\n\n\n## setData(data)\n\nSet the new edge data.\n\n##### `data` (Any, required)\n\nThe new data of the edge.\n\n\n## setDataProperty(key, value)\n\nUpdate a data property.\n\n##### `key` (String, required)\n\nThe key of the property\n\n##### `value` (Any, required)\n\nThe value of the property.\n\n\n\n## Source\n\n[src/core/edge.js](https://github.com/uber/graph.gl/blob/master/src/core/edge.js)\n","slug":"docs/api-reference/edge","title":"Edge Class"},{"excerpt":"Interactions In this chapter, you'll learn about how to interact with the graph. There are the porperties you can specify when using the…","rawMarkdownBody":"# Interactions\n\nIn this chapter, you'll learn about how to interact with the graph.\n\nThere are the porperties you can specify when using the GraphGL component:\n\n### `nodeEvents` (Object, optional)\nAll events callbacks will be triggered with the following parameters:\n```js\ninfo: {\n  object:  The object that was picked.\n  x: Mouse position x relative to the viewport.\n  y: Mouse position y relative to the viewport.\n  coordinate:  Mouse position in viewport coordinate system.\n}\n```\n\n - onClick: This callback will be called when the mouse clicks on an node. Default: `null`.\n - onMouseEnter: This callback will be called when the mouse enter an node. Default: `null`.\n - onHover: This callback will be called when the mouse hovers over an node. Default: `null`.\n - onMouseLeave: This callback will be called when the mouse leaves an node. Default: `null`.\n\n\n### `edgeEvents` (Object, optional)\nAll events callbacks will be triggered with the following parameters:\n```js\ninfo: {\n  object:  The object that was picked.\n  x: Mouse position x relative to the viewport.\n  y: Mouse position y relative to the viewport.\n  coordinate:  Mouse position in viewport coordinate system.\n}\n```\n\n - onClick: This callback will be called when the mouse clicks on an edge. Default: `null`.\n - onHover: This callback will be called when the mouse hovers over an edge. Default: `null`.\n\n\n### `wheelSensitivity` (Number: 0 to 1, optional)\nChanges the scroll wheel sensitivity when zooming. This is a multiplicative modifier.\nSo, a value between 0 and 1 reduces the sensitivity (zooms slower),\nand a value greater than 1 increases the sensitivity (zooms faster)\n\n### `enableZooming` (bool, optional)\nWhether zooming the graph is enabled\n\n### `enablePanning` (bool, optional)\nWhether panning the graph is enabled\n\n### `enableDragging` (bool, optional)\nWhether dragging the node is enabled\n\n### `resumeLayoutAfterDragging` (bool, optional)\nResume layout calculation after dragging a node\n","slug":"docs/api-reference/interactions","title":"Interactions"},{"excerpt":"Graph Class The  class is the base class of the graph. Constructor Parameters:  (Graph, optional) setGraphName() Set the name of the graph…","rawMarkdownBody":"# Graph Class\n\nThe `Graph` class is the base class of the graph.\n\n## Constructor\n```js\nnew Graph(graph);\n```\n\nParameters:\n\n##### `graph` (Graph, optional)\n\n## setGraphName()\nSet the name of the graph.\n\n## getGraphName()\nGet the name of the graph. Normally it can be used for dirty check.\n\n## addEdge(edge)\n\nAdd a new edge to the graph.\n\n##### `edge` (Edge, required)\nExpect a Edge object to be added to the graph.\n\n## addNode(node)\n\nAdd a new node to the graph.\n\n##### `node` (Node, required)\nExpect a Node object to be added to the graph.\n\n\n## batchAddEdges(edges)\n\nBatch add edges to the graph.\n\n##### `edges` (Edge[], required)\nExpect a list of Edge objects to be added to the graph.\n\n\n## batchAddNodes(nodes)\n\nBatch add nodes to the graph.\n\n##### `nodes` (Node[], required)\nExpect a list of Node objects to be added to the graph.\n\n## findEdge(edgeId)\n\n##### `edgeId` (String|Number, required)\nThe target edge ID.\n\nFind the edge by edge ID.\n\n##### `edgeId` (String|Number, required)\nThe target edge ID.\n\n## findNode(nodeId)\n\nFind the node by node ID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## getDegree(nodeId)\n\nGet the degree of the node by node ID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n## getEdgeMap()\n\nGet the edge map of the graph. The key of the map is the ID of the edges.\n\n## getEdges()\n\nGet all the edges of the graph.\n\n\n## getConnectedEdges(nodeId)\n\nReturn all the connected edges of a node by nodeID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## getNodeMap()\n\nGet the node map of the graph. The key of the map is the ID of the nodes.\n\n\n## getNodes()\n\nGet all the nodes of the graph.\n\n## getNodeSiblings(nodeId)\n\nReturn all the sibling nodes of a node by nodeID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## isEmpty()\n\nReturn true if the graph is empty.\n\n\n## removeEdge(edgeId)\n\nRemove an edge from the graph by the edge ID\n\n##### `edgeId` (String|Number, required)\nThe target edge ID.\n\n\n## removeNode(nodeId)\n\nRemove a node from the graph by node ID\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## reset()\n\nClean up everything in the graph.\n\n## resetEdges()\n\nClean up all the edges in the graph.\n\n## resetNodes()\n\nClean up all the nodes in the graph.\n","slug":"docs/api-reference/graph","title":"Graph Class"},{"excerpt":"GraphGL Usage  (Graph, required) The graph data will need to be processed through JSONLoader and converted into  object.  The expected data…","rawMarkdownBody":"# GraphGL\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/graph.png\" height=\"200\" />\n</p>\n\n### Usage\n\n```js\nimport GraphGL, {\n  JSONLoader,\n  NODE_TYPE,\n  D3ForceLayout\n} from 'graph.gl';\n\nconst App = ({data}) => {\n  const graph = JSONLoader({\n    json: data,\n    nodeParser: node => ({id: node.id}),\n    edgeParser: edge => ({\n      id: edge.id,\n      sourceId: edge.sourceId,\n      targetId: edge.targetId,\n      directed: true,\n    }),\n  });\n  return (\n    <GraphGL\n      graph={graph}\n      layout={new D3ForceLayout()}\n      nodeStyle={[\n        {\n          type: NODE_TYPE.CIRCLE,\n          radius: 10,\n          fill: 'blue',\n          opacity: 1,\n        },\n      ]}\n      edgeStyle={{\n        stroke: 'black',\n        strokeWidth: 2,\n      }}\n      enableDragging\n    />\n  );\n}\n```\n\n### `graph` (Graph, required)\nThe graph data will need to be processed through JSONLoader and converted into [`Graph`](docs/api-reference/graph) object.  The expected data should be an object includes two arrays: `nodes` and `edges`. Each node require an unique `id`. Each edge should have `id` as edge ID, `sourceId` as the ID of the source node, and `targetId` as the ID of the target node. For example:\n```js\nconst data = {\n  nodes: [\n    {id: '1'}, {id: '2'}, {id: '3'},\n  ],\n  edges: [\n    {id: 'e1', sourceId: '1', targetId: '2'},\n    {id: 'e2', sourceId: '1', targetId: '3'},\n    {id: 'e3', sourceId: '2', targetId: '3'},\n  ],\n};\n```\n\nThen, you can convert the data into `Graph` by `JSONLoader`:\n```js\nimport {JSONLoader} from 'graph.gl';\nconst graph = JSONLoader({json: data});\n```\n\n### `layout` (Layout, required)\nUse one of the layouts provided by Graph.gl or create a new custom layout class by following the [instruction](/docs/advanced/custom-layout). Right now Graph.gl provides D3 and Simple layout for basic usage. There are more experimental layouts under `src/experimental-layouts`, please reference to the experimental layout [gallery](docs/experimental).\n\n### `initialViewState` (Object, optional)\nFor more detail, please see [here](/docs/api-reference/viewport).\n\n### `nodeStyle` (Array, required)\n\nA node is made of a set of layers. nodeStyle is a set of style objects to describe the style for each layer.\nFor more detail, please see the explanation of nodeStyle at [here](docs/api-reference/node-style).\n\n### `nodeEvents` (Object, optional)\nFor more detail, please see [here](/docs/api-reference/interactions).\n\n### `edgeStyle`  (Object, required)\n\nFor more detail, please see the explanation of edgeStyle at [here](docs/api-reference/edge-style)\n\n### `edgeEvents` (Object, optional)\nFor more detail, please see [here](docs/api-reference/interactions).\n\n### Source\n[src/graphgl.js](https://github.com/uber/graph.gl/blob/master/src/graphgl.js)\n","slug":"docs/api-reference/graphgl","title":"GraphGL"},{"excerpt":"FLOW  (String | Array | Function, optional) Default:  The value can be hex code, color name, or color array  (each component is in the…","rawMarkdownBody":"# FLOW\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/edge-styles/flows.gif\" height=\"200\" />\n</p>\n\n### `color` (String | Array | Function, optional)\n- Default: `[255, 255, 255, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all edges.\n- If a function is provided, it is called on each edge to retrieve its color.\n\n### `speed` (Number | Function, optional)\n- Default: `0`\n- Unit: number of moving segment pass through the line per second.\n- If a number is provided for `speed`, all the flow will have the same speed.\n- If an accessor function is provided, the function will be called to retrieve the speed for each flow.\n\n### `width` (Number | Function, optional)\n- Default: `1`\n- If a number is provided for `width`, all the flow will have the same width.\n- If an accessor function is provided, the function will be called to retrieve the width for each flow.\n\n### `tailLength` (Number | Function, optional)\n- Default: `1`\n- If a number is provided for `tailLength`, all the flow will have the same length for the fading tail.\n- If an accessor function is provided, the function will be called to retrieve the length of the fading tail for each flow.\n","slug":"docs/api-reference/edge-style-flow","title":"FLOW"},{"excerpt":"LABEL  (String | Function, required) The text of the label. If a string is provided for , all the objects will have the same text. If an…","rawMarkdownBody":"# LABEL\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/node-styles/label.png\" height=\"100\" />\n</p>\n\n### `text` (String | Function, required)\n- The text of the label.\n- If a string is provided for `text`, all the objects will have the same text.\n- If an accessor function is provided, the function will be called to retrieve the text of each object.\n\n### `color` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n\n### `fontSize` (Number | Function, optional)\n- Default: `12`\n- If a number is provided for `fontSize`, all the labels will have the same font size.\n- If an accessor function is provided, the function will be called to retrieve the font size of each label.\n\n### `textAnchor` (String | Function, optional)\n- Default: `middle`\n- The text anchor. Available options include 'start', 'middle' and 'end'.\n\n- If a string is provided, it is used as the text anchor for all objects.\n- If a function is provided, it is called on each object to retrieve its text anchor.\n\n### `alignmentBaseline` (String | Function, optional)\n- Default: `center`\nThe alignment baseline. Available options include 'top', 'center' and 'bottom'.\n- If a string is provided, it is used as the alignment baseline for all objects.\n- If a function is provided, it is called on each object to retrieve its alignment baseline.\n\n### `angle` (Number | Function, optional)\n- Default: `0`\n- The rotating angle of each text label, in degrees.\n- If a number is provided, it is used as the angle for all objects.\n- If a function is provided, it is called on each object to retrieve its angle.\n","slug":"docs/api-reference/node-style-label","title":"LABEL"},{"excerpt":"RECTANGLE  (Number | Function, required) The width of the rectancle. If a number is provided, it is used as the width for all objects. If a…","rawMarkdownBody":"# RECTANGLE\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/node-styles/rectangle.png\" height=\"100\" />\n</p>\n\n### `width` (Number | Function, required)\n- The width of the rectancle.\n- If a number is provided, it is used as the width for all objects.\n- If a function is provided, it is called on each object to retrieve its width.\n\n### `height` (Number | Function, required)\n- The height of the rectangle.\n- If a number is provided, it is used as the height for all objects.\n- If a function is provided, it is called on each object to retrieve its height.\n\n### `fill` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\nIf a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n\n### `stroke` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each rectangle to retrieve its color.\n\n### `strokeWidth` (Number | Function, optional)\n- Default: `0`\nThe width of the outline of each rectangle.\nIf a number is provided, it is used as the outline width for all rectangles.\nIf a function is provided, it is called on each rectangle to retrieve its outline width.\n","slug":"docs/api-reference/node-style-rectangle","title":"RECTANGLE"},{"excerpt":"MARKER  (String | Function, required) Marker can be one of the following types: If a string is provided for , all the objects will use the…","rawMarkdownBody":"# MARKER\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/node-styles/marker.png\" height=\"100\" />\n</p>\n\n### `marker` (String | Function, required)\n- Marker can be one of the following types:\n```js\n\"location-marker-filled\", \"bell-filled\", \"bookmark-filled\", \"bookmark\", \"cd-filled\", \"cd\", \"checkmark\",\n\"circle-check-filled\", \"circle-check\", \"circle-filled\", \"circle-i-filled\", \"circle-i\", \"circle-minus-filled\",\n\"circle-minus\", \"circle-plus-filled\", \"circle-plus\", \"circle-questionmark-filled\", \"circle-questionmark\",\n\"circle-slash-filled\", \"circle-slash\", \"circle-x-filled\", \"circle-x\", \"circle\", \"diamond-filled\", \"diamond\",\n\"flag-filled\", \"flag\", \"gear\", \"heart-filled\", \"heart\", \"bell\", \"location-marker\", \"octagonal-star-filled\",\n\"octagonal-star\", \"person-filled\", \"person\", \"pin-filled\", \"pin\", \"plus-small\", \"plus\", \"rectangle-filled\",\n\"rectangle\", \"star-filled\", \"star\", \"tag-filled\", \"tag\", \"thumb-down-filled\", \"thumb-down\", \"thumb-up\",\n\"thumb_up-filled\", \"triangle-down-filled\", \"triangle-down\", \"triangle-left-filled\", \"triangle-left\",\n\"triangle-right-filled\", \"triangle-right\", \"triangle-up-filled\", \"triangle-up\", \"x-small\", \"x\"\n```\n- If a string is provided for `marker`, all the objects will use the same marker.\n- If an accessor function is provided, the function will be called to retrieve the marker of each marker.\n\n### `size` (Number | Function, optional)\n- Default: `12`\n- If a number is provided for `size`, all the markers will have the same size.\n- If an accessor function is provided, the function will be called to retrieve the size of each marker.\n\n### `fill` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\nIf a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n","slug":"docs/api-reference/node-style-marker","title":"MARKER"},{"excerpt":"Node Style Node accessors control the way how users want to render nodes. Layers provide the flexibility that users can add several visual…","rawMarkdownBody":"# Node Style\n\nNode accessors control the way how users want to render nodes. Layers provide the flexibility that users can add several visual layers to represent a node, such as adding circles, icons, and text labels.\n\n### Usage\nExample of nodeStyle:\n```js\nnodeStyle={[\n  {\n    type: NODE_TYPE.CIRCLE,\n    radius: 10,\n    color: '#f00'\n  },\n]}\n```\n\n### `type` (String, required)\n\n- `Type` can only be `CIRCLE`, `MARKER`, `RECTANGLE`, or `LABEL`.\n- Different type of layer may requires different properties. See more details in the ['Node style'](/docs/api-reference/node-style-circle) chapter below.\n\n### `offset` (null | Array, optional)\n- Default: `null`\n- The offset distance from the position of the object.\n\n### `scaleWithZoom` (Boolean, optional)\n- Default: `true`\n- If `scaleWithZoom` is true, the size of the element will be scaled according to the zoom level.\n","slug":"docs/api-reference/node-style","title":"Node Style"},{"excerpt":"CIRCLE  (String | Array | Function, optional) Default:  The value can be hex code, color name, or color array  (each component is in the…","rawMarkdownBody":"# CIRCLE\n\n<p align=\"center\">\n  <img src=\"/gatsby/images/node-styles/circle.png\" height=\"100\" />\n</p>\n\n### `fill` (String | Array | Function, optional)\n- Default: `#fff`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\nIf a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\nIf a function is provided, it is called on each rectangle to retrieve its color.\n\n### `radius` (Number | Function, optional)\n- Default: `1`\n- If a number is provided for `radius`, all the circles will have the same radius.\nIf an accessor function is provided, the function will be called to retrieve the radius of each circle.\n\n### `stroke` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each rectangle to retrieve its color.\n\n### `strokeWidth` (Number | Function, optional)\n- Default: `0`\n- The width of the outline of each rectangle.\n- If a number is provided, it is used as the outline width for all rectangles.\n- If a function is provided, it is called on each rectangle to retrieve its outline width.\n","slug":"docs/api-reference/node-style-circle","title":"CIRCLE"},{"excerpt":"Node Class The  class is the base class of the node, which provides a list of basic util functions to be used through out the applications…","rawMarkdownBody":"# Node Class\n\nThe `Node` class is the base class of the node, which provides a list of basic util functions to be used through out the applications.\n\n\n## Constructor\n```js\nnew Node(props);\n```\n\nParameters:\n- `props` (Object) - `Node` properties.\n\n### Basic Properties\n##### `id` (String|Number, required)\n\nThe `id` must be unique among all nodes in the graph at a given time.\n\n##### `data` (Object, optional)\n\n- Default: `{}`\n\nThe origin node data.\n\n\n## getConnectedEdges()\nReturn all the connected edges.\n\n\n## getDegree()\n\nReturn the degree of the node -- includes in-degree and out-degree\n\n\n## getId()\n\nReturn the ID of the node.\n\n\n## getInDegree()\n\nReturn the in-degree of the node.\n\n\n## getOutDegree()\n\nReturn the out-degree of the node.\n\n\n## getPropertyValue(key)\n\nReturn of the value of the selected property key.\n\n##### `key` (String|Number, required)\n\nThe property key.\n\n\n## getSiblingIds()\n\nReturn all the IDs of the sibling nodes.\n\n\n## setData(data)\n\nSet the new node data.\n\n##### `data` (Any, required)\n\nThe new data of the node.\n\n\n## setDataProperty(key, value)\n\nUpdate a data property.\n\n##### `key` (String, required)\n\nThe key of the property\n\n##### `value` (Any, required)\n\nThe value of the property.\n\n\n## addConnectedEdges(edges)\n\nAdd new connected edges to the node.\n\n\n## removeConnectedEdges(edges)\n\nRemove edges from `this._connectedEdges`\n\n\n## clearConnectedEdges()\n\nClear `this._connectedEdges`\n\n\n## Source\n\n[src/core/node.js](https://github.com/uber/graph.gl/blob/master/src/core/node.js)\n","slug":"docs/api-reference/node","title":"Node Class"},{"excerpt":"Write your own custom layout Here's the method you will likely to implement when creating your own custom layout: We will start with a  as…","rawMarkdownBody":"# Write your own custom layout\n\nHere's the method you will likely to implement when creating your own custom layout:\n```js\nimport {BaseLayout} from 'graph.gl';\n\nexport default class MyLayout extends BaseLayout {\n  // initialize the layout\n  constructor(options) {}\n  // first time to pass the graph data into this layout\n  initializeGraph(graph) {}\n  // update the existing graph\n  updateGraph(grpah) {}\n  // start the layout calculation\n  start() {}\n  // resume the layout calculation manually\n  resume() {}\n  // stop the layout calculation manually\n  stop() {}\n  // access the position of the node in the layout\n  getNodePosition(node) {}\n  // access the layout information of the edge\n  getEdgePosition(edge) {}\n  // Pin the node to a designated position, and the node won't move anymore\n  lockNodePosition(node, x, y) {}\n  // Unlock the node, the node will be able to move freely.\n  unlockNodePosition(node) {}\n}\n```\n\nWe will start with a `RandomLayout` as an example, you can follow the steps one by one and find the source code at the bottom.\n\n\n### Lifecycles\n\nFor a graph layout, everything goes through a set of events. In each event, the layout will need to take the inputs and do the different computations.  Lifecycle methods are various methods which are invoked at different phases of the lifecycle of a graph layout. If you are aware of these lifecycle events, it will enable you to control their entire flow and it will definitely help us to produce better results.\n\nA layout goes through the following phases:\n\n- Mounting:\n  `constructor` => `initializeGraph` => `start`\n- Updating:\n  `updageGraph` => `start`\n\n\nThere are a few callbacks should be triggered when the layout changes:\n - `this._callbacks.onLayoutChange()`\n  Every time when the layout changes, `onLayoutChange` callback should be triggered to notify GraphGL to re-render and update the view. Then GraphGL will use `getNodePosition` and `getEdgePosition` to get the position information to render the graph. Some users might also want to leverage this event hook to perform different interactions, ex: show a spinner on the UI to indicate the layout is computing.\n\n - `this._callbacks.onLayoutDone()`\n  When the layout is completed, 'onLayoutDone' should be triggered to notify GraphGL/User. Some users might also want to leverage this event hook to perform different interactions, ex: remove the spinner from the UI.\n\nIf you want to implement the drag & drag interaction on nodes, you will have to implement:\n - `lockNodePosition`: pin the node at the designated position.\n - `unlockNodePosition`: free the node from the position.\n - `resume`: resume the layout calculation.\n\nThe sequence of the events is like:\nstartDragging => lockNodePosition => release => unlockNodePosition => resume\n\n### constructor\n\nIn the constructor, you can initialize some internal object you'll need for the layout state.\nThe most important part is to create a 'map' to keep the position of nodes.\n\n```js\n\nexport default class RandomLayout extends BaseLayout {\n\n  static defaultOptions = {\n    viewportWidth: 1000,\n    viewportHeight: 1000\n  };\n\n  constructor(options) {\n    // init BaseLayout\n    super(options);\n    // give a name to this layout\n    this._name = 'RandomLayout';\n    // combine the default options with user input\n    this._options = {\n      ...this.defaultOptions,\n      ...options,\n    };\n    // a map to persis the position of nodes.\n    this._nodePositionMap = {};\n  }\n}\n```\n\n### Update the graph data\nGraphGL will call `initializeGraph` to pass the graph data into the layout.\nIf the graph is the same one but part ofthe data is changed, GraphGL will call `updateGraph` method to notify the layout.\n\nIn this case, we can just simply update the `this._nodePositionMap` by going through all nodes in the graph.\n\n```js\n  initializeGraph(graph) {\n    this.updateGraph(graph);\n  }\n\n  updateGraph(grpah) {\n    this._graph = graph;\n    this._nodePositionMap = graph.getNodes().reduce((res, node) => {\n      res[node.getId()] = this._nodePositionMap[node.getId()] || [0, 0];\n      return res;\n    }, {});\n  }\n```\n\n\n### Compute layout\n\nGraphGL will call `start()` of the layout to kick start the layout calculation.\nIn this case, the computation is easy as assigning random position for each node only.\nOnce the layout is completed, you will need to call `this._callbacks.onLayoutChange()` to notify the render redraw.\nThen call `this._callbacks.onLayoutDone()` to notify the render that layout is completed.\n\n```js\n  start() {\n    const {viewportWidth, viewportHeight} = this._options;\n    this._nodePositionMap = Object.keys(this._nodePositionMap).reduce((res, nodeId) => {\n      res[nodeId] = [Math.random() * viewportWidth, Math.random() * viewportHeight];\n      return res;\n    }, {});\n    this._callbacks.onLayoutChange();\n    this._callbacks.onLayoutDone();\n  }\n```\n\n### Getters\n\nGraphGL will keep retrieving the position of nodes and edges from the layout. You will need to provide two getters `getNodePosition` and `getEdgePosition`.\n\n - getNodePosition: return the position of the node [x, y].\n - getEdgePosition: return the rendering information of the edge, including:\n   -- type: the type of the edge, it should be 'LINE', 'SPLINE_CURVE', or 'PATH'.\n   -- sourcePosition: the position of source node.\n   -- targetPosition: the position of target node.\n   -- controlPoints: a set of control points for 'SPLINE_CURVE', or 'PATH' edge.\n\n\n```js\n  getNodePosition = node => this._nodePositionMap[node.getId()];\n\n  getEdgePosition = edge => {\n    const sourcePos = this._nodePositionMap[edge.getSourceNodeId()];\n    const targetPos = this._nodePositionMap[edge.getTargetNodeId()];\n    return {\n      type: EDGE_TYPE.LINE,\n      sourcePosition: sourcePos,\n      targetPosition: targetPos,\n      controlPoints: [],\n    };\n  };\n```\n\n\n### Full source code\n\n```js\nimport {BaseLayout} from 'graph.gl';\n\nexport default class RandomLayout extends BaseLayout {\n  constructor(options) {\n    super(options);\n    this._name = 'RandomLayout';\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n    this._nodePositionMap = {};\n  }\n\n  // first time to pass the graph data into this layout\n  initializeGraph(graph) {\n    this.updateGraph(graph);\n  }\n  // update the existing graph\n  updateGraph(grpah) {\n    this._graph = graph;\n    this._nodePositionMap = graph.getNodes().reduce((res, node) => {\n      res[node.getId()] = this._nodePositionMap[node.getId()] || [0, 0];\n      return res;\n    }, {});\n  }\n\n  start() {\n    const {viewportWidth, viewportHeight} = this._options;\n    this._nodePositionMap = Object.keys(this._nodePositionMap).reduce((res, nodeId) => {\n      res[nodeId] = [Math.random() * viewportWidth, Math.random() * viewportHeight];\n      return res;\n    }, {});\n    this._callbacks.onLayoutChange();\n    this._callbacks.onLayoutDone();\n  }\n\n  getNodePosition = node => this._nodePositionMap[node.getId()];\n\n  getEdgePosition = edge => {\n    const sourcePos = this._nodePositionMap[edge.getSourceNodeId()];\n    const targetPos = this._nodePositionMap[edge.getTargetNodeId()];\n    return {\n      type: EDGE_TYPE.LINE,\n      sourcePosition: sourcePos,\n      targetPosition: targetPos,\n      controlPoints: [],\n    };\n  };\n}\n```\n","slug":"docs/advanced/custom-layout","title":"Write your own custom layout"},{"excerpt":"Experimental Layouts","rawMarkdownBody":"# Experimental Layouts\n\n<style>\n.bg-white {\n  background: #aaa;\n  color: #ededed;\n}\n.layout-card {\n  background: white;\n  cursor: pointer;\n  position: relative;\n  width: 250px;\n  height: 250px;\n  display: inline-block;\n  line-height: 0;\n}\n.layout-card img {\n  transition: opacity .4s;\n}\n.layout-card>div:after {\n  font-size: 0.833em;\n  content: attr(data-name);\n  padding: 5%;\n  left: 0;\n  width: 80%;\n  height: 80%;\n  margin: 10%;\n  top: 0;\n  left: 0;\n  border: solid 2px;\n  border-image-slice: 2;\n  box-sizing: border-box;\n}\n.layout-card>div:before {\n  content: attr(data-title);\n  font-size: 1.4em;\n  font-weight: 100;\n  width: 100%;\n  padding: 12%;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n}\n.layout-card>div:after,\n.layout-card>div:before {\n  display: block;\n  z-index: 1;\n  position: absolute;\n  transition: opacity .4s;\n  opacity: 0;\n  text-align: center;\n  pointer-events: none;\n  box-sizing: border-box;\n  line-height: 1.5;\n}\n.layout-card>div:hover img {\n  opacity: 0.2;\n}\n.layout-card>div:hover:before,\n.layout-card>div:hover:after {\n  opacity: 1;\n}\n</style>\n\n<div style=\"display: flex; flex-wrap: wrap;\">\n  <div class=\"layout-card\">\n    <div class=\"bg-white\" data-title=\"Cola\">\n      <a href=\"/storybook/?path=/story/experimental-layouts--cola-js\">\n        <img src=\"/gatsby/images/layouts/cola.png\">\n      </a>\n    </div>\n  </div>\n\n  <div class=\"layout-card\">\n    <div class=\"bg-white\" data-title=\"Hive Plot\">\n      <a href=\"/storybook/?path=/story/experimental-layouts--hive-plot\">\n        <img src=\"/gatsby/images/layouts/hive-plot.png\">\n      </a>\n    </div>\n  </div>\n\n  <div class=\"layout-card\">\n    <div class=\"bg-white\" data-title=\"MultiGraph\">\n      <a href=\"/storybook/?path=/story/experimental-layouts--multigraph\">\n        <img src=\"/gatsby/images/layouts/multi-graph.png\">\n      </a>\n    </div>\n  </div>\n  <div class=\"layout-card\">\n    <div class=\"bg-white\" data-title=\"ngraph\">\n      <a href=\"/storybook/?path=/story/experimental-layouts--ngraph\">\n        <img src=\"/gatsby/images/layouts/ngraph.png\">\n      </a>\n    </div>\n  </div>\n  <div class=\"layout-card\">\n    <div class=\"bg-white\" data-title=\"Radial\">\n      <a href=\"/storybook/?path=/story/experimental-layouts--radial-layout\">\n        <img src=\"/gatsby/images/layouts/radial.png\">\n      </a>\n    </div>\n  </div>\n  <div class=\"layout-card\">\n    <div class=\"bg-white\" data-title=\"Viz.js\">\n      <a href=\"/storybook/?path=/story/experimental-layouts--viz-js\">\n        <img src=\"/gatsby/images/layouts/vizjs.png\">\n      </a>\n    </div>\n  </div>\n</div>\n","slug":"docs/advanced/gallery","title":"Experimental Layouts"},{"excerpt":"Viewport initialViewState (Object, optional) target (x: Number, y: Number, optional):  The target origin to the center of the view. zoom…","rawMarkdownBody":"# Viewport\n\n### initialViewState (Object, optional)\n\n```js\ninitialViewState={{\n  target: [0, 0],\n  zoom: 1,\n}}\n```\n - target ([x: Number, y: Number], optional):  The target origin to the center of the view.\n - zoom (Number, optional): The zoom level of the view.\n\n### `minZoom` (Number, optional)\nA minimum scale factor for zoom level of the graph.\n\n### `maxZoom` (Number, optional)\nA maximum scale factor for zoom level of the graph.\n\n### `viewportPadding` (Number, optional)\nPadding for fitting entire graph in the screen. (pixel)\n","slug":"docs/api-reference/viewport","title":"Viewport"}]}}}