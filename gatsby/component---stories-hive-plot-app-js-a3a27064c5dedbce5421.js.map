{"version":3,"sources":["webpack:///../stories/hive-plot/hive-plot-layout.js","webpack:///../stories/hive-plot/app.js","webpack:///./node_modules/core-js/modules/es6.math.hypot.js","webpack:///../utils/data/io.js"],"names":["defaultOptions","innerRadius","outerRadius","getNodeAxis","node","computeControlPoint","_ref","sourcePosition","sourceNodeAxis","targetPosition","targetNodeAxis","halfAxis","totalAxis","sameSide","direction","source","target","offset","Math","midPoint","dx","dy","normal","length","normalized","HivePlot","options","_this","_BaseLayout","call","this","getNodePosition","_nodePositionMap","getId","getEdgePosition","edge","_options","sourceNodeId","getSourceNodeId","targetNodeId","getTargetNodeId","sourceNode","_nodeMap","targetNode","type","EDGE_TYPE","LINE","controlPoints","controlPoint","_totalAxis","SPLINE_CURVE","lockNodePosition","x","y","id","_callbacks","onLayoutChange","onLayoutDone","_name","Object","assign","initializeGraph","updateGraph","graph","_this2","_this$_options","_graph","getNodes","reduce","res","_axis","axis","keys","sortedNodes","sort","a","b","getDegree","center","angleInterval","axisIdx","axisAngle","bucketedNodes","interval","idx","radius","start","BaseLayout","HivePlotExample","state","getNodeColor","hex","_nodeColorScale","Color","array","componentDidMount","fetchJSONFromS3","sampleGraph","nodes","nodeIndexMap","JSONLoader","json","nodeParser","name","edgeParser","sourceId","targetId","directed","setState","groupExtent","extent","n","group","scaleOrdinal","render","react_default","createElement","src_0","layout","hive_plot_layout_HivePlot","DEFAULT_WIDTH","nodeStyle","NODE_TYPE","CIRCLE","fill","edgeStyle","stroke","strokeWidth","Component","$export","__webpack_require__","abs","S","hypot","value1","value2","arg","div","sum","i","aLen","arguments","larg","Infinity","sqrt","_asyncToGenerator","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default","mark","_callee2","paths","wrap","_context2","prev","next","Promise","all","map","_ref2","_callee","path","response","_context","fetch","PREFIX","sent","abrupt","stop","_x2","apply","_x"],"mappings":"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","file":"component---stories-hive-plot-app-js-a3a27064c5dedbce5421.js","sourcesContent":["import {BaseLayout, EDGE_TYPE} from '../../src';\n\nconst defaultOptions = {\n  innerRadius: 100,\n  outerRadius: 500,\n  getNodeAxis: node => node.getPropertyValue('group'),\n};\n\nconst computeControlPoint = ({\n  sourcePosition,\n  sourceNodeAxis,\n  targetPosition,\n  targetNodeAxis,\n  totalAxis,\n}) => {\n  const halfAxis = (totalAxis - 1) / 2;\n  // check whether the source/target are at the same side.\n  const sameSide =\n    (sourceNodeAxis <= halfAxis && targetNodeAxis <= halfAxis) ||\n    (sourceNodeAxis > halfAxis && targetNodeAxis > halfAxis);\n  // curve direction\n  const direction =\n    sameSide && (sourceNodeAxis <= halfAxis && targetNodeAxis <= halfAxis)\n      ? 1\n      : -1;\n\n  // flip the source/target to follow the clockwise diretion\n  const source =\n    sourceNodeAxis < targetNodeAxis && sameSide\n      ? sourcePosition\n      : targetPosition;\n  const target =\n    sourceNodeAxis < targetNodeAxis && sameSide\n      ? targetPosition\n      : sourcePosition;\n\n  // calculate offset\n  const distance = Math.hypot(source[0] - target[0], source[1] - target[1]);\n  const offset = distance * 0.2;\n\n  const midPoint = [(source[0] + target[0]) / 2, (source[1] + target[1]) / 2];\n  const dx = target[0] - source[0];\n  const dy = target[1] - source[1];\n  const normal = [dy, -dx];\n  const length = Math.hypot(dy, -dx);\n  const normalized = [normal[0] / length, normal[1] / length];\n  return [\n    midPoint[0] + normalized[0] * offset * direction,\n    midPoint[1] + normalized[1] * offset * direction,\n  ];\n};\n\nexport default class HivePlot extends BaseLayout {\n  constructor(options) {\n    super(options);\n    this._name = 'HivePlot';\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n    this._nodePositionMap = {};\n  }\n\n  initializeGraph(graph) {\n    this.updateGraph(graph);\n  }\n\n  updateGraph(graph) {\n    const {getNodeAxis, innerRadius, outerRadius} = this._options;\n    this._graph = graph;\n    this._nodeMap = graph.getNodes().reduce((res, node) => {\n      res[node.getId()] = node;\n      return res;\n    }, {});\n\n    // bucket nodes into few axis\n\n    this._axis = graph.getNodes().reduce((res, node) => {\n      const axis = getNodeAxis(node);\n      if (!res[axis]) {\n        res[axis] = [];\n      }\n      res[axis].push(node);\n      return res;\n    }, {});\n\n    // sort nodes along the same axis by degree\n    this._axis = Object.keys(this._axis).reduce((res, axis) => {\n      const bucketedNodes = this._axis[axis];\n      const sortedNodes = bucketedNodes.sort((a, b) => {\n        if (a.getDegree() > b.getDegree()) {\n          return 1;\n        }\n        if (a.getDegree() === b.getDegree()) {\n          return 0;\n        }\n        return -1;\n      });\n      res[axis] = sortedNodes;\n      return res;\n    }, {});\n    this._totalAxis = Object.keys(this._axis).length;\n    const center = [0, 0];\n    const angleInterval = 360 / Object.keys(this._axis).length;\n\n    // calculate positions\n    this._nodePositionMap = Object.keys(this._axis).reduce(\n      (res, axis, axisIdx) => {\n        const axisAngle = angleInterval * axisIdx;\n        const bucketedNodes = this._axis[axis];\n        const interval = (outerRadius - innerRadius) / bucketedNodes.length;\n\n        bucketedNodes.forEach((node, idx) => {\n          const radius = innerRadius + idx * interval;\n          const x = Math.cos((axisAngle / 180) * Math.PI) * radius + center[0];\n          const y = Math.sin((axisAngle / 180) * Math.PI) * radius + center[1];\n          res[node.getId()] = [x, y];\n        });\n        return res;\n      },\n      {}\n    );\n  }\n\n  start() {\n    this._callbacks.onLayoutChange();\n    this._callbacks.onLayoutDone();\n  }\n\n  getNodePosition = node => this._nodePositionMap[node.getId()];\n\n  getEdgePosition = edge => {\n    const {getNodeAxis} = this._options;\n    const sourceNodeId = edge.getSourceNodeId();\n    const targetNodeId = edge.getTargetNodeId();\n\n    const sourcePosition = this._nodePositionMap[sourceNodeId];\n    const targetPosition = this._nodePositionMap[targetNodeId];\n\n    const sourceNode = this._nodeMap[sourceNodeId];\n    const targetNode = this._nodeMap[targetNodeId];\n\n    const sourceNodeAxis = getNodeAxis(sourceNode);\n    const targetNodeAxis = getNodeAxis(targetNode);\n\n    if (sourceNodeAxis === targetNodeAxis) {\n      return {\n        type: EDGE_TYPE.LINE,\n        sourcePosition,\n        targetPosition,\n        controlPoints: [],\n      };\n    }\n\n    const controlPoint = computeControlPoint({\n      sourcePosition,\n      sourceNodeAxis,\n      targetPosition,\n      targetNodeAxis,\n      totalAxis: this._totalAxis,\n    });\n\n    return {\n      type: EDGE_TYPE.SPLINE_CURVE,\n      sourcePosition,\n      targetPosition,\n      controlPoints: [controlPoint],\n    };\n  };\n\n  lockNodePosition = (node, x, y) => {\n    this._nodePositionMap[node.id] = [x, y];\n    this._callbacks.onLayoutChange();\n    this._callbacks.onLayoutDone();\n  };\n}\n","import React, {Component} from 'react';\nimport {scaleOrdinal} from 'd3-scale';\nimport {schemeAccent} from 'd3-scale-chromatic';\nimport {extent} from 'd3-array';\nimport Color from 'color';\nimport {fetchJSONFromS3} from '../../utils/data/io';\n\n// graph.gl\nimport GraphGL, {JSONLoader, NODE_TYPE} from '../../src';\nimport HivePlot from './hive-plot-layout';\n\nconst DEFAULT_NODE_SIZE = 3;\nconst DEFAULT_EDGE_COLOR = 'rgba(80, 80, 80, 0.3)';\nconst DEFAULT_EDGE_WIDTH = 1;\nconst DEFAULT_WIDTH = 1000;\n\nexport default class HivePlotExample extends Component {\n  state = {graph: null};\n\n  componentDidMount() {\n    fetchJSONFromS3(['wits.json']).then(([sampleGraph]) => {\n      const {nodes} = sampleGraph;\n      const nodeIndexMap = nodes.reduce((res, node, idx) => {\n        res[idx] = node.name;\n        return res;\n      }, {});\n      const graph = JSONLoader({\n        json: sampleGraph,\n        nodeParser: node => ({id: node.name}),\n        edgeParser: edge => ({\n          id: `${edge.source}-${edge.target}`,\n          sourceId: nodeIndexMap[edge.source],\n          targetId: nodeIndexMap[edge.target],\n          directed: true,\n        }),\n      });\n      this.setState({graph});\n      const groupExtent = extent(nodes, n => n.group);\n      this._nodeColorScale = scaleOrdinal(schemeAccent).domain(groupExtent);\n    });\n  }\n\n  // node accessors\n  getNodeColor = node => {\n    const hex = this._nodeColorScale(node.getPropertyValue('group'));\n    return Color(hex).array();\n  };\n\n  render() {\n    if (!this.state.graph) {\n      return null;\n    }\n    return (\n      <GraphGL\n        graph={this.state.graph}\n        layout={\n          new HivePlot({\n            innerRadius: DEFAULT_WIDTH * 0.05,\n            outerRadius: DEFAULT_WIDTH * 0.3,\n            getNodeAxis: node => node.getPropertyValue('group'),\n          })\n        }\n        nodeStyle={[\n          {\n            type: NODE_TYPE.CIRCLE,\n            radius: DEFAULT_NODE_SIZE,\n            fill: this.getNodeColor,\n          },\n        ]}\n        edgeStyle={{\n          stroke: DEFAULT_EDGE_COLOR,\n          strokeWidth: DEFAULT_EDGE_WIDTH,\n        }}\n      />\n    );\n  }\n}\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import {fetch} from 'global';\n\n// cdn path prefix for s3 uber-static buckets\nconst PREFIX = 'https://d1a3f4spazzrp4.cloudfront.net/mlvis/graphgl';\n\n/**\n * a utility function that loads a list of files from S3, asynchronously\n *\n * example usage:\n *   fetchJSONFromS3([\n *     'graph.json',\n *     'speeds.json',\n *   ]).then(([graph, speed]) => {\n *      // use the loaded data here\n *   });\n *\n * @param {array} paths: a list file paths on S3\n * @return an array of promises with data loaded from the specified paths\n */\nexport const fetchJSONFromS3 = async paths =>\n  await Promise.all(\n    paths.map(async path => {\n      const response = await fetch(`${PREFIX}/${path}`);\n      return await response.json();\n    })\n  );\n"],"sourceRoot":""}