{"version":3,"sources":["webpack:///../utils/data/random-graph-generator.js","webpack:///../utils/data/sample-datasets.js","webpack:///../examples/simple-graph-viewer/index.js"],"names":["genAllPairs","s","length","pairs","i","j","randomChoose","k","selected","setSize","size","idx","Math","randomGraphGenerator","n","m","name","nodes","Array","from","keys","map","id","edges","link","sourceId","targetId","convertNgraphDataset","ngraph","fromId","toId","sample_datasets","Les Miserable","les_miserable","Random (20, 40)","Random (100, 200)","Random (1000, 2000)","Random (5000, 3000)","Ladder (10)","NgraphGenerators","BalancedBinTree (5)","BalancedBinTree (8)","Grid (10, 10)","WattsStrogatz (100, 10, 0.06)","DEFAULT_DATASET","Root","state","selectedDataset","handleChangeGraph","_ref","value","target","_this","setState","render","this","graphData","SAMPLE_GRAPH_DATASETS","graph","JSONLoader","json","react_default","a","createElement","style","display","flexDirection","height","width","zIndex","onChange","Object","data","key","flex","src","layout","nodeStyle","type","NODE_TYPE","CIRCLE","radius","fill","edgeStyle","stroke","strokeWidth","Component","__webpack_exports__"],"mappings":"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","file":"component---examples-simple-graph-viewer-index-js-92a8c8d706701b6d86ba.js","sourcesContent":["const genAllPairs = s => {\n  const length = s.length;\n  const pairs = [];\n  for (var i = 0; i < length - 1; i += 1) {\n    for (var j = i + 1; j < length; j += 1) {\n      pairs.push([s[i], s[j]]);\n    }\n  }\n  return pairs;\n};\n\nconst randomChoose = (s, k) => {\n  const selected = [];\n  let i = -1;\n  const setSize = s.length;\n  const size = k >= setSize ? setSize : k;\n  while (++i < size) {\n    const idx = Math.floor(Math.random() * s.length);\n    selected.push(s.splice(idx, 1)[0]);\n  }\n  return selected;\n};\n\nexport default function randomGraphGenerator(n, m, name = 'default') {\n  // generate an array of nodes with id form 0 to n;\n  const nodes = Array.from(Array(n).keys()).map(id => ({id}));\n  const links = randomChoose(genAllPairs(nodes), m);\n  const edges = links.map((link, idx) => ({\n    id: idx,\n    sourceId: link[0].id,\n    targetId: link[1].id,\n  }));\n  return {name, nodes, edges};\n}\n","import NgraphGenerators from 'ngraph.generators';\n\nimport lesGraph from './les-miserable.json';\nimport randomGraphGenerator from './random-graph-generator';\n\nconst convertNgraphDataset = ngraph => {\n  const nodes = [];\n  const edges = [];\n  ngraph.forEachNode(n => {\n    nodes.push({id: n.id});\n  });\n  ngraph.forEachLink(link => {\n    edges.push({\n      id: link.id,\n      sourceId: link.fromId,\n      targetId: link.toId,\n    });\n  });\n  return {nodes, edges};\n};\n\nconst SAMPLE_GRAPH_DATASETS = {\n  'Les Miserable': () => lesGraph,\n  'Random (20, 40)': () => randomGraphGenerator(20, 40, 'Random (20, 40)'),\n  'Random (100, 200)': () =>\n    randomGraphGenerator(100, 200, 'Random (100, 200)'),\n  'Random (1000, 2000)': () =>\n    randomGraphGenerator(1000, 2000, 'Random (1000, 2000)'),\n  'Random (5000, 3000)': () =>\n    randomGraphGenerator(5000, 3000, 'Random (5000, 3000)'),\n  'Ladder (10)': () => convertNgraphDataset(NgraphGenerators.ladder(10)),\n  'BalancedBinTree (5)': () =>\n    convertNgraphDataset(NgraphGenerators.balancedBinTree(5)),\n  'BalancedBinTree (8)': () =>\n    convertNgraphDataset(NgraphGenerators.balancedBinTree(8)),\n  'Grid (10, 10)': () => convertNgraphDataset(NgraphGenerators.grid(10, 10)),\n  'WattsStrogatz (100, 10, 0.06)': () =>\n    convertNgraphDataset(NgraphGenerators.wattsStrogatz(100, 10, 0.06)),\n};\n\nexport default SAMPLE_GRAPH_DATASETS;\n","import React, {Component} from 'react';\n\n// graph.gl\nimport GraphGL, {\n  D3ForceLayout,\n  JSONLoader,\n  NODE_TYPE,\n  randomGraphGenerator,\n} from 'graph.gl';\n\nimport SAMPLE_GRAPH_DATASETS from '../../utils/data/sample-datasets';\n\nconst DEFAULT_NODE_SIZE = 5;\n\nconst DEFAULT_DATASET = 'Random (20, 40)';\n\nclass Root extends Component {\n  state = {\n    selectedDataset: DEFAULT_DATASET,\n  };\n\n  handleChangeGraph = ({target: {value}}) =>\n    this.setState({selectedDataset: value});\n\n  render() {\n    const {selectedDataset} = this.state;\n    const graphData = SAMPLE_GRAPH_DATASETS[selectedDataset]();\n    const graph = JSONLoader({json: graphData});\n\n    return (\n      <div style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n        <div style={{width: '100%', zIndex: 999}}>\n          <div>\n            Dataset:\n            <select\n              value={this.state.selectedDataset}\n              onChange={this.handleChangeGraph}\n            >\n              {Object.keys(SAMPLE_GRAPH_DATASETS).map(data => (\n                <option key={data} value={data}>\n                  {data}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div style={{width: '100%', flex: 1}}>\n          <GraphGL\n            graph={graph}\n            layout={new D3ForceLayout()}\n            nodeStyle={[\n              {\n                type: NODE_TYPE.CIRCLE,\n                radius: DEFAULT_NODE_SIZE,\n                fill: 'red',\n              },\n            ]}\n            edgeStyle={{\n              stroke: '#000',\n              strokeWidth: 1,\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Root;\n"],"sourceRoot":""}