{"version":3,"sources":["webpack:///../stories/radial-layout/radial-layout.js","webpack:///../stories/radial-layout/app.js","webpack:///../utils/data/io.js"],"names":["defaultOptions","radius","rotate","cx","cy","x","y","angle","radians","Math","cos","sin","getLeafNodeCount","node","count","children","reduce","res","c","getPath","targetId","path","some","RadialLayout","options","_this","_BaseLayout","call","this","getNodePosition","_hierarchicalPoints","id","getEdgePosition","edge","sourceNodeId","getSourceNodeId","targetNodeId","getTargetNodeId","sourceNodePos","targetNodePos","sourcePath","nestedTree","targetPath","totalLevels","length","commonAncestorLevel","i","wayPoints","nodeId","_i","_i2","type","EDGE_TYPE","SPLINE_CURVE","sourcePosition","targetPosition","controlPoints","lockNodePosition","_callbacks","onLayoutChange","onLayoutDone","_name","_options","Object","assign","_graph","initializeGraph","updateGraph","graph","start","nodeCount","getNodes","tree","unitAngle","rootNode","nodeMap","isLeaf","traverseTree","map","nid","distanceBetweenLevels","getTreeDepth","depth","calculatePosition","level","startAngle","positionMap","isRoot","groupSize","tempAngle","n","BaseLayout","BasicRadialExample","state","getNodeColor","hex","_nodeColorScale","Color","array","componentDidMount","_this2","fetchJSONFromS3","_ref","sampleGraph","nodes","nodeIndexMap","idx","JSONLoader","json","nodeParser","name","edgeParser","source","target","sourceId","directed","setState","groupExtent","extent","group","scaleOrdinal","render","react_default","a","createElement","src_0","layout","radial_layout_RadialLayout","nodeStyle","NODE_TYPE","CIRCLE","fill","LABEL","text","color","textAnchor","fontSize","edgeStyle","stroke","strokeWidth","Component","_asyncToGenerator","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default","mark","_callee2","paths","wrap","_context2","prev","next","Promise","all","_ref2","_callee","response","_context","fetch","PREFIX","sent","abrupt","stop","_x2","apply","arguments","_x"],"mappings":"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","file":"component---stories-radial-layout-app-js-0ee2a089ea7adc2bbf5e.js","sourcesContent":["import {BaseLayout, EDGE_TYPE} from '../../src';\n\nconst defaultOptions = {\n  radius: 500,\n};\n\nfunction rotate(cx, cy, x, y, angle) {\n  const radians = (Math.PI / 180) * angle;\n  const cos = Math.cos(radians);\n  const sin = Math.sin(radians);\n  const nx = cos * (x - cx) + sin * (y - cy) + cx;\n  const ny = cos * (y - cy) - sin * (x - cx) + cy;\n  return [nx, ny];\n}\n\nconst traverseTree = (nodeId, nodeMap) => {\n  const node = nodeMap[nodeId];\n  if (node.isLeaf) {\n    return node;\n  }\n  return {\n    ...node,\n    children: node.children.map(nid => traverseTree(nid, nodeMap)),\n  };\n};\n\nconst getLeafNodeCount = (node, count) => {\n  if (!node.children || node.children.length === 0) {\n    return count + 1;\n  }\n  const sum = node.children.reduce((res, c) => {\n    return res + getLeafNodeCount(c, 0);\n  }, 0);\n  return count + sum;\n};\n\nconst getTreeDepth = (node, depth = 0) => {\n  if (node.isLeaf) {\n    return depth;\n  }\n  return getTreeDepth(node.children[0], depth + 1);\n};\n\nconst getPath = (node, targetId, path) => {\n  if (node.id === targetId) {\n    path.push(node.id);\n    return true;\n  }\n  const inChildren =\n    node.children && node.children.some(c => getPath(c, targetId, path));\n  if (inChildren) {\n    path.push(node.id);\n    return true;\n  }\n  return false;\n};\n\nexport default class RadialLayout extends BaseLayout {\n  constructor(options) {\n    super(options);\n    this._name = 'RadialLayout';\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n    // custom layout data structure\n    this._graph = null;\n    this._hierarchicalPoints = {};\n  }\n\n  initializeGraph(graph) {\n    this.updateGraph(graph);\n  }\n\n  updateGraph(graph) {\n    this._graph = graph;\n  }\n\n  start() {\n    const nodeCount = this._graph.getNodes().length;\n    if (nodeCount === 0) {\n      return;\n    }\n\n    const {tree} = this._options;\n\n    if (!tree || tree.length === 0) {\n      return;\n    }\n\n    const {radius} = this._options;\n    const unitAngle = 360 / nodeCount;\n\n    // hierarchical positions\n    const rootNode = tree[0];\n\n    const nodeMap = tree.reduce((res, node) => {\n      res[node.id] = {\n        ...node,\n        isLeaf: !node.children || node.children.length === 0,\n      };\n      return res;\n    }, {});\n    // nested structure\n    this.nestedTree = traverseTree(rootNode.id, nodeMap);\n\n    const totalLevels = getTreeDepth(this.nestedTree, 0);\n    const distanceBetweenLevels = radius / (totalLevels - 1);\n\n    const calculatePosition = (node, level, startAngle, positionMap) => {\n      const isRoot = node.id === rootNode.id;\n\n      if (node.children && node.children.length !== 0) {\n        const groupSize = getLeafNodeCount(node, 0);\n        // center the pos\n        positionMap[node.id] = isRoot\n          ? [0, 0]\n          : rotate(\n              0,\n              0,\n              0,\n              distanceBetweenLevels * (level + 1),\n              startAngle + unitAngle * (groupSize / 2)\n            );\n        // calculate children position\n        let tempAngle = startAngle;\n        node.children.forEach(n => {\n          calculatePosition(n, level + 1, tempAngle, positionMap);\n          tempAngle += getLeafNodeCount(n, 0) * unitAngle;\n        });\n      } else {\n        positionMap[node.id] = rotate(\n          0,\n          0,\n          0,\n          distanceBetweenLevels * (level + 1),\n          startAngle + unitAngle\n        );\n      }\n    };\n\n    this._hierarchicalPoints = {};\n    calculatePosition(this.nestedTree, 0, 0, this._hierarchicalPoints);\n    // layout completes: notifiy component to re-render\n    this._callbacks.onLayoutChange();\n    this._callbacks.onLayoutDone();\n  }\n\n  getNodePosition = node => {\n    return this._hierarchicalPoints[node.id];\n  };\n\n  // spline curve version\n  getEdgePosition = edge => {\n    const sourceNodeId = edge.getSourceNodeId();\n    const targetNodeId = edge.getTargetNodeId();\n    const sourceNodePos = this._hierarchicalPoints[sourceNodeId];\n    const targetNodePos = this._hierarchicalPoints[targetNodeId];\n\n    const sourcePath = [];\n    getPath(this.nestedTree, sourceNodeId, sourcePath);\n    const targetPath = [];\n    getPath(this.nestedTree, targetNodeId, targetPath);\n\n    const totalLevels = sourcePath.length;\n    let commonAncestorLevel = totalLevels - 1; // root\n    for (let i = 0; i < totalLevels; i++) {\n      if (sourcePath[i] === targetPath[i]) {\n        commonAncestorLevel = i;\n        break;\n      }\n    }\n\n    const wayPoints = [];\n    for (let i = 1; i <= commonAncestorLevel; i++) {\n      const nodeId = sourcePath[i];\n      wayPoints.push(this._hierarchicalPoints[nodeId]);\n    }\n    for (let i = commonAncestorLevel - 1; i > 0; i--) {\n      const nodeId = targetPath[i];\n      wayPoints.push(this._hierarchicalPoints[nodeId]);\n    }\n\n    return {\n      type: EDGE_TYPE.SPLINE_CURVE,\n      sourcePosition: sourceNodePos,\n      targetPosition: targetNodePos,\n      controlPoints: wayPoints,\n    };\n  };\n\n  lockNodePosition = (node, x, y) => {\n    this._hierarchicalPoints[node.id] = [x, y];\n    this._callbacks.onLayoutChange();\n    this._callbacks.onLayoutDone();\n  };\n}\n","import React, {Component} from 'react';\nimport {scaleOrdinal} from 'd3-scale';\nimport {schemeAccent} from 'd3-scale-chromatic';\nimport {extent} from 'd3-array';\nimport Color from 'color';\n\n// data\nimport {fetchJSONFromS3} from '../../utils/data/io';\n\n// graph.gl\nimport GraphGL, {JSONLoader, NODE_TYPE} from '../../src';\nimport RadialLayout from './radial-layout';\n\nconst DEFAULT_NODE_SIZE = 5;\nconst DEFAULT_NODE_LABEL_COLOR = '#646464';\nconst DEFAULT_EDGE_COLOR = 'rgba(80, 80, 80, 0.3)';\nconst RADIUS = 150;\n\nexport default class BasicRadialExample extends Component {\n  state = {graph: null, tree: null};\n\n  componentDidMount() {\n    fetchJSONFromS3(['wits.json']).then(([sampleGraph]) => {\n      const {nodes} = sampleGraph;\n      const nodeIndexMap = nodes.reduce((res, node, idx) => {\n        res[idx] = node.name;\n        return res;\n      }, {});\n      const graph = JSONLoader({\n        json: sampleGraph,\n        nodeParser: node => ({id: node.name}),\n        edgeParser: edge => ({\n          id: `${edge.source}-${edge.target}`,\n          sourceId: nodeIndexMap[edge.source],\n          targetId: nodeIndexMap[edge.target],\n          directed: true,\n        }),\n      });\n      this.setState({graph, tree: sampleGraph.tree});\n      // parse attributes\n      const groupExtent = extent(nodes, n => n.group);\n      this._nodeColorScale = scaleOrdinal(schemeAccent).domain(groupExtent);\n    });\n  }\n\n  // node accessors\n  getNodeColor = node => {\n    const hex = this._nodeColorScale(node.getPropertyValue('group'));\n    return Color(hex).array();\n  };\n\n  render() {\n    if (!this.state.graph) {\n      return null;\n    }\n\n    return (\n      <GraphGL\n        graph={this.state.graph}\n        layout={\n          new RadialLayout({\n            tree: this.state.tree,\n            radius: RADIUS,\n          })\n        }\n        nodeStyle={[\n          {\n            type: NODE_TYPE.CIRCLE,\n            radius: DEFAULT_NODE_SIZE,\n            fill: this.getNodeColor,\n          },\n          {\n            type: NODE_TYPE.LABEL,\n            text: node => node.getPropertyValue('name'),\n            color: DEFAULT_NODE_LABEL_COLOR,\n            textAnchor: 'start',\n            fontSize: 8,\n            // TODO: figure out how to get node position without engine\n            // angle: n => {\n            //   const nodePos = this._engine.getNodePosition(n);\n            //   return (Math.atan2(nodePos[1], nodePos[0]) * -180) / Math.PI;\n            // },\n          },\n        ]}\n        edgeStyle={{\n          stroke: DEFAULT_EDGE_COLOR,\n          strokeWidth: 1,\n        }}\n      />\n    );\n  }\n}\n","import {fetch} from 'global';\n\n// cdn path prefix for s3 uber-static buckets\nconst PREFIX = 'https://d1a3f4spazzrp4.cloudfront.net/mlvis/graphgl';\n\n/**\n * a utility function that loads a list of files from S3, asynchronously\n *\n * example usage:\n *   fetchJSONFromS3([\n *     'graph.json',\n *     'speeds.json',\n *   ]).then(([graph, speed]) => {\n *      // use the loaded data here\n *   });\n *\n * @param {array} paths: a list file paths on S3\n * @return an array of promises with data loaded from the specified paths\n */\nexport const fetchJSONFromS3 = async paths =>\n  await Promise.all(\n    paths.map(async path => {\n      const response = await fetch(`${PREFIX}/${path}`);\n      return await response.json();\n    })\n  );\n"],"sourceRoot":""}