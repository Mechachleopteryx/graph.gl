{"componentChunkName":"component---node-modules-ocular-gatsby-src-templates-search-jsx","path":"/search","webpackCompilationHash":"b05ef88fe9007a6965bc","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":[{"excerpt":"Infovis Roadmap Composable Base Layers Axis Layer 2D/3D\nScales, ticks etc. Grid Layer Match axis layer with scales ticks etc. We should…","rawMarkdownBody":"# Infovis Roadmap\n\n## Composable Base Layers\n\n### Axis Layer\n\n2D/3D\nScales, ticks etc.\n\n### Grid Layer\n\nMatch axis layer with scales ticks etc.\n\n* We should replace the axes and grid in the 3D surface explorer with these general ones. http://deck.gl/#/examples/custom-layers/3d-surface-explorer\n* Consider moving surface explorer into graph.gl\n\n\n### Orthographic Controller\n\nFlat zoom and pan, fit bounds.\n\n\n### Controller Requirements\n\nInfovis apps tend to need detailed control over interaction.\n\n* More props (zoom speed etc)\n* Ability to customize or completely rewrite the controller.\n* Simplify API, move the State class into controller class?\n* Better view/controller docs? (pointers to issues with current doc would be helpful)\n\n\n### ScreenSpace Requirements\n\nSome layers like `AxisLayer` want to layout in screen space\n\n* `Layer.shouldUpdateState() { return true; }`\n* `Layer.updateState({changeFlags}) { if (changeFlags.viewportChanged) { this.context.viewport... }}`\n* `COORDINATE_SYSTEM.SCREEN_SPACE`\n    * Does such a coordinate system make sense?\n    * Screen is 0-1, 0-1?\n    * Aspect ratio preserved?\n* Screen space fit bounds in controller?\n","slug":"docs/roadmap","title":"Infovis Roadmap"},{"excerpt":"Experimental layouts TBD","rawMarkdownBody":"# Experimental layouts\n\nTBD","slug":"docs/experimental/overview","title":"Experimental layouts"},{"excerpt":"Write your own custom layout TBD","rawMarkdownBody":"# Write your own custom layout\n\nTBD\n","slug":"docs/advanced/custom-layout","title":"Write your own custom layout"},{"excerpt":"Introduction deck.gl layers and components for infovis visualizations.","rawMarkdownBody":"# Introduction\n\ndeck.gl layers and components for infovis visualizations.\n","slug":"docs","title":"Introduction"},{"excerpt":"Edge Class The  class is the base class of the edge. Constructor Parameters:  (Object) -  properties. Basic Properties  (String|Number…","rawMarkdownBody":"# Edge Class\n\nThe `Edge` class is the base class of the edge.\n\n\n## Constructor\n```\nnew Edge(props);\n```\n\nParameters:\n- `props` (Object) - `Edge` properties.\n\n### Basic Properties\n##### `id` (String|Number, required)\n\nThe `id` must be unique among all edges in the graph at a given time.\n\n\n##### `sourceId` (String|Number, required)\nThe id of the source node.\n\n##### `targetId` (String|Number, required)\nThe id of the target node.\n\n\n##### `directed` (Boolean, optional)\n\n- Default: `false`\nThe edge has direction or not.\n\n\n##### `data` (Object, optional)\n\n- Default: `{}`\n\nThe origin edge data.\n\n\n## getId()\nReturn the ID of the edge.\n\n\n## getPropertyValue(key)\nReturn of the value of the selected property key.\n\n##### `key` (String|Number, required)\n\nThe property key.\n\n## getSourceNodeId()\nGet the ID of the source node.\n\n\n## getTargetNodeId()\nGet the ID of the target node.\n\n\n## isDirected()\nReturn whether the edge is directed or not.\n\n\n## setData(data)\n\nSet the new edge data.\n\n##### `data` (Any, required)\n\nThe new data of the edge.\n\n\n## setDataProperty(key, value)\n\nUpdate a data property.\n\n##### `key` (String, required)\n\nThe key of the property\n\n##### `value` (Any, required)\n\nThe value of the property.\n\n\n\n## Source\n\n[src/core/edge.js](src/core/edge.js)\n","slug":"docs/api-reference/edge","title":"Edge Class"},{"excerpt":"Edge Style TBD - pic Usage  (String | Array | Function, optional) Default:  The value can be hex code, color name, or color array  (each…","rawMarkdownBody":"# Edge Style\n\nTBD - pic\n\n## Usage\n\n```\nedgeStyle={{\n  stroke: 'black',\n  strokeWidth: 2,\n  decorators: [\n    {\n      type: EDGE_DECORATOR_TYPE.LABEL,\n      text: edge => edge.id,\n      color: '#000',\n      fontSize: 18,\n    },\n  ],\n}}\n```\n\n#### `stroke` (String | Array | Function, optional)\n- Default: `[255, 255, 255, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all edges.\n- If a function is provided, it is called on each rectangle to retrieve its color.\n\n#### `strokeWidth` (Number | Function, optional)\n- Default: `0`\nThe width of the outline of each rectangle.\nIf a number is provided, it is used as the outline width for all edges.\nIf a function is provided, it is called on each rectangle to retrieve its outline width.\n\n#### `decorators` (Array, optional)\nA set of decorators on edges.\n\n## Decorator: LABEL\n\nTBD - pic\n\n#### `text` (String | Function, required)\n- The text of the label.\n- If a string is provided for `text`, all the edges will have the same text.\n- If an accessor function is provided, the function will be called to retrieve the text of each edge.\n\n#### `color` (String | Array | Function, optional)\n- Default: `[255, 255, 255, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all edges.\n- If a function is provided, it is called on each edge to retrieve its color.\n\n#### `fontSize` (Number | Function, optional)\n- Default: `12`\n- If a number is provided for `fontSize`, all the labels will have the same font size.\n- If an accessor function is provided, the function will be called to retrieve the font size of each label.\n\n#### `textAnchor` (String | Function, optional)\n- Default: `middle`\n- The text anchor. Available options include 'start', 'middle' and 'end'.\n\n- If a string is provided, it is used as the text anchor for all edges.\n- If a function is provided, it is called on each edge to retrieve its text anchor.\n\n#### `alignmentBaseline` (String | Function, optional)\n- Default: `center`\nThe alignment baseline. Available options include 'top', 'center' and 'bottom'.\n- If a string is provided, it is used as the alignment baseline for all edges.\n- If a function is provided, it is called on each edge to retrieve its alignment baseline.\n\n\n## Decorator: FLOW\n\nTBD - pic\n\n#### `color` (String | Array | Function, optional)\n- Default: `[255, 255, 255, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all edges.\n- If a function is provided, it is called on each edge to retrieve its color.\n\n#### `speed` (Number | Function, optional)\n- Default: `0`\n- Unit: number of moving segment pass through the line per second.\n- If a number is provided for `speed`, all the flow will have the same speed.\n- If an accessor function is provided, the function will be called to retrieve the speed for each flow.\n\n#### `width` (Number | Function, optional)\n- Default: `1`\n- If a number is provided for `width`, all the flow will have the same width.\n- If an accessor function is provided, the function will be called to retrieve the width for each flow.\n\n#### `tailLength` (Number | Function, optional)\n- Default: `1`\n- If a number is provided for `tailLength`, all the flow will have the same length for the fading tail.\n- If an accessor function is provided, the function will be called to retrieve the length of the fading tail for each flow.\n","slug":"docs/api-reference/edge-style","title":"Edge Style"},{"excerpt":"Graph Class The  class is the base class of the graph. Constructor Parameters:  (Graph, optional) setGraphName() Set the name of the graph…","rawMarkdownBody":"# Graph Class\n\nThe `Graph` class is the base class of the graph.\n\n## Constructor\n```\nnew Graph(graph);\n```\n\nParameters:\n\n##### `graph` (Graph, optional)\n\n## setGraphName()\nSet the name of the graph.\n\n## getGraphName()\nGet the name of the graph. Normally it can be used for dirty check.\n\n## addEdge(edge)\n\nAdd a new edge to the graph.\n\n##### `edge` (Edge, required)\nExpect a Edge object to be added to the graph.\n\n## addNode(node)\n\nAdd a new node to the graph.\n\n##### `node` (Node, required)\nExpect a Node object to be added to the graph.\n\n\n## batchAddEdges(edges)\n\nBatch add edges to the graph.\n\n##### `edges` (Edge[], required)\nExpect a list of Edge objects to be added to the graph.\n\n\n## batchAddNodes(nodes)\n\nBatch add nodes to the graph.\n\n##### `nodes` (Node[], required)\nExpect a list of Node objects to be added to the graph.\n\n## findEdge(edgeId)\n\n##### `edgeId` (String|Number, required)\nThe target edge ID.\n\nFind the edge by edge ID.\n\n##### `edgeId` (String|Number, required)\nThe target edge ID.\n\n## findNode(nodeId)\n\nFind the node by node ID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## getDegree(nodeId)\n\nGet the degree of the node by node ID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n## getEdgeMap()\n\nGet the edge map of the graph. The key of the map is the ID of the edges.\n\n## getEdges()\n\nGet all the edges of the graph.\n\n\n## getConnectedEdges(nodeId)\n\nReturn all the connected edges of a node by nodeID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## getNodeMap()\n\nGet the node map of the graph. The key of the map is the ID of the nodes.\n\n\n## getNodes()\n\nGet all the nodes of the graph.\n\n## getNodeSiblings(nodeId)\n\nReturn all the sibling nodes of a node by nodeID.\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## isEmpty()\n\nReturn true if the graph is empty.\n\n\n## removeEdge(edgeId)\n\nRemove an edge from the graph by the edge ID\n\n##### `edgeId` (String|Number, required)\nThe target edge ID.\n\n\n## removeNode(nodeId)\n\nRemove a node from the graph by node ID\n\n##### `nodeId` (String|Number, required)\nThe target node ID.\n\n\n## reset()\n\nClean up everything in the graph.\n\n## resetEdges()\n\nClean up all the edges in the graph.\n\n## resetNodes()\n\nClean up all the nodes in the graph.\n","slug":"docs/api-reference/graph","title":"Graph Class"},{"excerpt":"GraphGL Usage graph (Graph, required) Example graph: layout (Layout, required) Use one of the layouts provided by Graph.gl or create a new…","rawMarkdownBody":"# GraphGL\n\n## Usage\n\n```\n<GraphGL\n  grpah\n  layout\n  nodeStyle\n  nodeEvents\n  edgeStyle\n  edgeEvents\n/>\n```\n\n## graph (Graph, required)\n\nExample graph:\n```\n\n```\n\n## layout (Layout, required)\nUse one of the layouts provided by Graph.gl or create a new custom layout class by following the [instruction](/docs/advanced/custom-layout). Right now Graph.gl provides D3 and Simple layout for basic usage. There are more experimental layouts under `src/experimental-layouts`, please reference to the experimental layout [gallery](docs/experimental).\n\n## nodeStyle (Array, required)\n\nA node is made of a set of layers. nodeStyle is a set of style objects to describe the style for each layer.\nFor more detail, please see the explanation of nodeStyle at [here](/docs/node-style).\n\n## nodeEvents (Object, required)\nAll events callbacks will be triggered with the following parameters:\n```\ninfo: {\n  object:  The object that was picked.\n  x: Mouse position x relative to the viewport.\n  y: Mouse position y relative to the viewport.\n  coordinate:  Mouse position in viewport coordinate system.  \n}\n```\n\n - onClick: This callback will be called when the mouse clicks on an node. Default: `null`.\n - onMouseEnter: This callback will be called when the mouse enter an node. Default: `null`.\n - onHover: This callback will be called when the mouse hovers over an node. Default: `null`.\n - onMouseLeave: This callback will be called when the mouse leaves an node. Default: `null`.\n\n## edgeStyle  (Object, required)\n\nFor more detail, please see the explanation of edgeStyle at [here](/docs/edge-style)\n\n## edgeEvents (Object, required)\nAll events callbacks will be triggered with the following parameters:\n```\ninfo: {\n  object:  The object that was picked.\n  x: Mouse position x relative to the viewport.\n  y: Mouse position y relative to the viewport.\n  coordinate:  Mouse position in viewport coordinate system.  \n}\n```\n\n - onClick: This callback will be called when the mouse clicks on an edge. Default: `null`.\n - onHover: This callback will be called when the mouse hovers over an edge. Default: `null`.\n","slug":"docs/api-reference/graphgl","title":"GraphGL"},{"excerpt":"Node Style Node accessors control the way how users want to render nodes. Layers provide the flexibility that users can add several visual…","rawMarkdownBody":"# Node Style\n\nNode accessors control the way how users want to render nodes. Layers provide the flexibility that users can add several visual layers to represent a node, such as adding circles, icons, and text labels.\n\n## usage\nExample of nodeStyle:\n```\nnodeStyle={[\n  {\n    type: NODE_TYPE.CIRCLE,\n    radius: object => this.getNodeSize(d),\n    color: '#f00'\n  },\n]}\n```\n\n#### `type` (String, required)\n\n- `Type` can only be `CIRCLE`, `MARKER`, `RECTANGLE`, or `LABEL`.\n- Different type of layer may requires different properties. See more details of each layer type below.\n\n#### `offset` (null | Array, optional)\n- Default: `null`\n- The offset distance from the position of the object. \n\n#### `scaleWithZoom` (Boolean, optional)\n- Default: `true`\n- If `scaleWithZoom` is true, the size of the element will be scaled according to the zoom level.\n\n\n## CIRCLE type:\n\nTBD - pic\n\n#### `fill` (String | Array | Function, optional)\n- Default: `#fff` \n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\nIf a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\nIf a function is provided, it is called on each rectangle to retrieve its color.\n\n#### `radius` (Number | Function, optional)\n- Default: `1`\n- If a number is provided for `radius`, all the circles will have the same radius.\nIf an accessor function is provided, the function will be called to retrieve the radius of each circle.\n\n#### `stroke` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each rectangle to retrieve its color.\n\n#### `strokeWidth` (Number | Function, optional)\n- Default: `0`\n- The width of the outline of each rectangle.\n- If a number is provided, it is used as the outline width for all rectangles.\n- If a function is provided, it is called on each rectangle to retrieve its outline width.\n\n\n## RECTANGLE type:\n\nTBD - pic\n\n#### `width` (Number | Function, required)\n- The width of the rectancle.\n- If a number is provided, it is used as the width for all objects.\n- If a function is provided, it is called on each object to retrieve its width.\n\n#### `height` (Number | Function, required)\n- The height of the rectangle.\n- If a number is provided, it is used as the height for all objects.\n- If a function is provided, it is called on each object to retrieve its height.\n\n#### `fill` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\nIf a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n\n#### `stroke` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each rectangle to retrieve its color.\n\n#### `strokeWidth` (Number | Function, optional)\n- Default: `0`\nThe width of the outline of each rectangle.\nIf a number is provided, it is used as the outline width for all rectangles.\nIf a function is provided, it is called on each rectangle to retrieve its outline width.\n\n## MARKER type:\n\nTBD - pic\n\n#### `marker` (String | Function, required)\n- Marker can be one of the following types:\n```\n\"location-marker-filled\", \"bell-filled\", \"bookmark-filled\", \"bookmark\", \"cd-filled\", \"cd\", \"checkmark\", \"circle-check-filled\", \"circle-check\", \"circle-filled\", \"circle-i-filled\", \"circle-i\", \"circle-minus-filled\", \"circle-minus\", \"circle-plus-filled\", \"circle-plus\", \"circle-questionmark-filled\", \"circle-questionmark\", \"circle-slash-filled\", \"circle-slash\", \"circle-x-filled\", \"circle-x\", \"circle\", \"diamond-filled\", \"diamond\", \"flag-filled\", \"flag\", \"gear\", \"heart-filled\", \"heart\", \"bell\", \"location-marker\", \"octagonal-star-filled\", \"octagonal-star\", \"person-filled\", \"person\", \"pin-filled\", \"pin\", \"plus-small\", \"plus\", \"rectangle-filled\", \"rectangle\", \"star-filled\", \"star\", \"tag-filled\", \"tag\", \"thumb-down-filled\", \"thumb-down\", \"thumb-up\", \"thumb_up-filled\", \"triangle-down-filled\", \"triangle-down\", \"triangle-left-filled\", \"triangle-left\", \"triangle-right-filled\", \"triangle-right\", \"triangle-up-filled\", \"triangle-up\", \"x-small\", \"x\"\n```\n- If a string is provided for `marker`, all the objects will use the same marker.\n- If an accessor function is provided, the function will be called to retrieve the marker of each marker.\n\n#### `size` (Number | Function, optional)\n- Default: `12`\n- If a number is provided for `size`, all the markers will have the same size.\n- If an accessor function is provided, the function will be called to retrieve the size of each marker.\n\n#### `fill` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\nIf a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n\n## LABEL type:\n\nTBD - pic\n\n#### `text` (String | Function, required)\n- The text of the label. \n- If a string is provided for `text`, all the objects will have the same text.\n- If an accessor function is provided, the function will be called to retrieve the text of each object.\n\n#### `color` (String | Array | Function, optional)\n- Default: `[0, 0, 0, 255]`\n- The value can be hex code, color name, or color array `[r, g, b, a]` (each component is in the 0 - 255 range).\n- If a color value (hex code, color name, or array) is provided, it is used as the global color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n\n#### `fontSize` (Number | Function, optional)\n- Default: `12`\n- If a number is provided for `fontSize`, all the labels will have the same font size.\n- If an accessor function is provided, the function will be called to retrieve the font size of each label.\n\n#### `textAnchor` (String | Function, optional)\n- Default: `middle`\n- The text anchor. Available options include 'start', 'middle' and 'end'.\n\n- If a string is provided, it is used as the text anchor for all objects.\n- If a function is provided, it is called on each object to retrieve its text anchor.\n\n#### `alignmentBaseline` (String | Function, optional)\n- Default: `center`\nThe alignment baseline. Available options include 'top', 'center' and 'bottom'.\n- If a string is provided, it is used as the alignment baseline for all objects.\n- If a function is provided, it is called on each object to retrieve its alignment baseline.\n\n#### `angle` (Number | Function, optional)\n- Default: `0`\n- The rotating angle of each text label, in degrees.\n- If a number is provided, it is used as the angle for all objects.\n- If a function is provided, it is called on each object to retrieve its angle.\n","slug":"docs/api-reference/node-style","title":"Node Style"},{"excerpt":"View Usage width (Number, required) The width of the view. height (Number, required) The height of the view. offset ({x: Number, y: Number…","rawMarkdownBody":"# View\n\n## Usage\n\n```\nview={\n  width: window.innerWidth,\n  height: window.innerHeight,\n  offset: {x: 0, y: 0},\n  zoomLevel: 1\n},\n```\n\n### width (Number, required)\n\nThe width of the view.\n\n### height (Number, required)\n\nThe height of the view.\n\n### offset ({x: Number, y: Number}, required)\n\nThe offset to the center of the view. You can get 'panning' effect by changing the offset.\n\n### zoomLevel (Number, required)\n\nThe zoom level of the view. \n","slug":"docs/api-reference/view","title":"View"},{"excerpt":"Node Class The  class is the base class of the node, which provides a list of basic util functions to be used through the applications…","rawMarkdownBody":"# Node Class\n\nThe `Node` class is the base class of the node, which provides a list of basic util functions to be used through the applications.\n\n\n## Constructor\n```\nnew Node(props);\n```\n\nParameters:\n- `props` (Object) - `Node` properties.\n\n### Basic Properties\n##### `id` (String|Number, required)\n\nThe `id` must be unique among all nodes in the graph at a given time.\n\n##### `data` (Object, optional)\n\n- Default: `{}`\n\nThe origin node data.\n\n\n## getConnectedEdges()\nReturn all the connected edges.\n\n\n## getDegree()\n\nReturn the degree of the node -- includes in-degree and out-degree\n\n\n## getId()\n\nReturn the ID of the node.\n\n\n## getInDegree()\n\nReturn the in-degree of the node.\n\n\n## getOutDegree()\n\nReturn the out-degree of the node.\n\n\n## getPropertyValue(key)\n\nReturn of the value of the selected property key.\n\n##### `key` (String|Number, required)\n\nThe property key.\n\n\n## getSiblingIds()\n\nReturn all the IDs of the sibling nodes.\n\n\n## setData(data)\n\nSet the new node data.\n\n##### `data` (Any, required)\n\nThe new data of the node.\n\n\n## setDataProperty(key, value)\n\nUpdate a data property.\n\n##### `key` (String, required)\n\nThe key of the property\n\n##### `value` (Any, required)\n\nThe value of the property.\n\n\n## addConnectedEdges(edges)\n\nAdd new connected edges to the node.\n\n\n## removeConnectedEdges(edges)\n\nRemove edges from `this._connectedEdges`\n\n\n## clearConnectedEdges()\n\nClear `this._connectedEdges`\n\n\n## Source\n\n[src/core/node.js](src/core/node.js)\n","slug":"docs/api-reference/node","title":"Node Class"}]}}}